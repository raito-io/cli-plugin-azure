// Code generated by mockery v2.27.1. DO NOT EDIT.

package monitor

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockMonitorService is an autogenerated mock type for the MonitorService type
type MockMonitorService struct {
	mock.Mock
}

type MockMonitorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitorService) EXPECT() *MockMonitorService_Expecter {
	return &MockMonitorService_Expecter{mock: &_m.Mock}
}

// GetLogs provides a mock function with given fields: ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName
func (_m *MockMonitorService) GetLogs(ctx context.Context, configMap *config.ConfigMap, query string, startDate time.Time, resourceGroup string, nameSpace string, resourceType string, resourceName string) ([]LogEntry, error) {
	ret := _m.Called(ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName)

	var r0 []LogEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, time.Time, string, string, string, string) ([]LogEntry, error)); ok {
		return rf(ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, time.Time, string, string, string, string) []LogEntry); ok {
		r0 = rf(ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LogEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string, time.Time, string, string, string, string) error); ok {
		r1 = rf(ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorService_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockMonitorService_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - query string
//   - startDate time.Time
//   - resourceGroup string
//   - nameSpace string
//   - resourceType string
//   - resourceName string
func (_e *MockMonitorService_Expecter) GetLogs(ctx interface{}, configMap interface{}, query interface{}, startDate interface{}, resourceGroup interface{}, nameSpace interface{}, resourceType interface{}, resourceName interface{}) *MockMonitorService_GetLogs_Call {
	return &MockMonitorService_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, configMap, query, startDate, resourceGroup, nameSpace, resourceType, resourceName)}
}

func (_c *MockMonitorService_GetLogs_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, query string, startDate time.Time, resourceGroup string, nameSpace string, resourceType string, resourceName string)) *MockMonitorService_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(time.Time), args[4].(string), args[5].(string), args[6].(string), args[7].(string))
	})
	return _c
}

func (_c *MockMonitorService_GetLogs_Call) Return(_a0 []LogEntry, _a1 error) *MockMonitorService_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorService_GetLogs_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, time.Time, string, string, string, string) ([]LogEntry, error)) *MockMonitorService_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceDiagnosticSetting provides a mock function with given fields: ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName
func (_m *MockMonitorService) GetResourceDiagnosticSetting(ctx context.Context, configMap *config.ConfigMap, resourceGroup string, nameSpace string, resourceType string, resourceName string) (*ResourceDiagnosticSetting, error) {
	ret := _m.Called(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)

	var r0 *ResourceDiagnosticSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string, string) (*ResourceDiagnosticSetting, error)); ok {
		return rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string, string) *ResourceDiagnosticSetting); ok {
		r0 = rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResourceDiagnosticSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string, string, string, string) error); ok {
		r1 = rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorService_GetResourceDiagnosticSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceDiagnosticSetting'
type MockMonitorService_GetResourceDiagnosticSetting_Call struct {
	*mock.Call
}

// GetResourceDiagnosticSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - resourceGroup string
//   - nameSpace string
//   - resourceType string
//   - resourceName string
func (_e *MockMonitorService_Expecter) GetResourceDiagnosticSetting(ctx interface{}, configMap interface{}, resourceGroup interface{}, nameSpace interface{}, resourceType interface{}, resourceName interface{}) *MockMonitorService_GetResourceDiagnosticSetting_Call {
	return &MockMonitorService_GetResourceDiagnosticSetting_Call{Call: _e.mock.On("GetResourceDiagnosticSetting", ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)}
}

func (_c *MockMonitorService_GetResourceDiagnosticSetting_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, resourceGroup string, nameSpace string, resourceType string, resourceName string)) *MockMonitorService_GetResourceDiagnosticSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockMonitorService_GetResourceDiagnosticSetting_Call) Return(_a0 *ResourceDiagnosticSetting, _a1 error) *MockMonitorService_GetResourceDiagnosticSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorService_GetResourceDiagnosticSetting_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string, string) (*ResourceDiagnosticSetting, error)) *MockMonitorService_GetResourceDiagnosticSetting_Call {
	_c.Call.Return(run)
	return _c
}

// HasLogsEnabled provides a mock function with given fields: ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName
func (_m *MockMonitorService) HasLogsEnabled(ctx context.Context, configMap *config.ConfigMap, resourceGroup string, nameSpace string, resourceType string, resourceName string) (bool, error) {
	ret := _m.Called(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string, string) (bool, error)); ok {
		return rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap, string, string, string, string) bool); ok {
		r0 = rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap, string, string, string, string) error); ok {
		r1 = rf(ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorService_HasLogsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasLogsEnabled'
type MockMonitorService_HasLogsEnabled_Call struct {
	*mock.Call
}

// HasLogsEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
//   - resourceGroup string
//   - nameSpace string
//   - resourceType string
//   - resourceName string
func (_e *MockMonitorService_Expecter) HasLogsEnabled(ctx interface{}, configMap interface{}, resourceGroup interface{}, nameSpace interface{}, resourceType interface{}, resourceName interface{}) *MockMonitorService_HasLogsEnabled_Call {
	return &MockMonitorService_HasLogsEnabled_Call{Call: _e.mock.On("HasLogsEnabled", ctx, configMap, resourceGroup, nameSpace, resourceType, resourceName)}
}

func (_c *MockMonitorService_HasLogsEnabled_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap, resourceGroup string, nameSpace string, resourceType string, resourceName string)) *MockMonitorService_HasLogsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockMonitorService_HasLogsEnabled_Call) Return(_a0 bool, _a1 error) *MockMonitorService_HasLogsEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorService_HasLogsEnabled_Call) RunAndReturn(run func(context.Context, *config.ConfigMap, string, string, string, string) (bool, error)) *MockMonitorService_HasLogsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMonitorService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMonitorService creates a new instance of MockMonitorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMonitorService(t mockConstructorTestingTNewMockMonitorService) *MockMonitorService {
	mock := &MockMonitorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

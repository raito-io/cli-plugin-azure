// Code generated by "enumer -type=ACLPermission"; DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"
)

const (
	_ACLPermissionName_0      = "ExecuteWrite"
	_ACLPermissionLowerName_0 = "executewrite"
	_ACLPermissionName_1      = "Read"
	_ACLPermissionLowerName_1 = "read"
)

var (
	_ACLPermissionIndex_0 = [...]uint8{0, 7, 12}
	_ACLPermissionIndex_1 = [...]uint8{0, 4}
)

func (i ACLPermission) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _ACLPermissionName_0[_ACLPermissionIndex_0[i]:_ACLPermissionIndex_0[i+1]]
	case i == 4:
		return _ACLPermissionName_1
	default:
		return fmt.Sprintf("ACLPermission(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ACLPermissionNoOp() {
	var x [1]struct{}
	_ = x[Execute-(1)]
	_ = x[Write-(2)]
	_ = x[Read-(4)]
}

var _ACLPermissionValues = []ACLPermission{Execute, Write, Read}

var _ACLPermissionNameToValueMap = map[string]ACLPermission{
	_ACLPermissionName_0[0:7]:       Execute,
	_ACLPermissionLowerName_0[0:7]:  Execute,
	_ACLPermissionName_0[7:12]:      Write,
	_ACLPermissionLowerName_0[7:12]: Write,
	_ACLPermissionName_1[0:4]:       Read,
	_ACLPermissionLowerName_1[0:4]:  Read,
}

var _ACLPermissionNames = []string{
	_ACLPermissionName_0[0:7],
	_ACLPermissionName_0[7:12],
	_ACLPermissionName_1[0:4],
}

// ACLPermissionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ACLPermissionString(s string) (ACLPermission, error) {
	if val, ok := _ACLPermissionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ACLPermissionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ACLPermission values", s)
}

// ACLPermissionValues returns all values of the enum
func ACLPermissionValues() []ACLPermission {
	return _ACLPermissionValues
}

// ACLPermissionStrings returns a slice of all String values of the enum
func ACLPermissionStrings() []string {
	strs := make([]string, len(_ACLPermissionNames))
	copy(strs, _ACLPermissionNames)
	return strs
}

// IsAACLPermission returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ACLPermission) IsAACLPermission() bool {
	for _, v := range _ACLPermissionValues {
		if i == v {
			return true
		}
	}
	return false
}
